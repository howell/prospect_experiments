* Questions about prospect
** What are the different forms and their relation to the NC paper?
*** advertise/observe versus pub/sub
*** (?!)
*** ? (wildcard?)
*** at-meta
** How to start the program using spawn-world or spawn-demand-matcher?
** What is the pattern language?
** Is there a way to look at the current assertions? Just use printf?
** How to get the assertions out of a patch?
** What is the distinction between (assert X) and (message X)?
** How to inject a keyboard event into the network?
** Initial network configuration
The base layer of the network is called ground. The processes spawned at the
top level of the module are one level removed from ground as evident by the
need to use `at-meta` and #:meta-level to see messages created with
send-ground-message. Is there a way to create a ground actor? Can spawn be
wrapped with at-meta?
** Spawn a process at a specific level
In the context of a timer handler, if I call `spawn` then the process will be
at ground level. But, all of the other processes I created by calling spawn
from the top level of my module are at a different level. Is there a direct
way to spawn a process at a specific level, or do I have to create a process
at the desired level that will listen for ground-messages and spawn processes
in response?
** Why the need for patch-seq?
My intuition was that the list of actions in a transition would effectively
all be patch-seq'd together.
** Pattern of using gensym to come up with unique labels?
** Difficulty coming up with a protocol for the "platformer"
*** really just moving two pictures around a canvas with collision detection).
*** Where should the state of each entity be?
*** Seems ugly to always be retracting assertions - might as well just use messages
*** Take 1: mimic big-bang program completely?
**** one process holds on to all the state and does everything!
